version: '3.8'

services:

  db:
    build:
      
      context: .
      dockerfile: ./social-network/Dockerfile-db
      args:
        - MYSQL_DATABASE=networkapp
        - MYSQL_ROOT_PASSWORD=root
    ports: 
      - "3306:3306"

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  mongo:
    ports:
      - '27017:27017'
    container_name: dkrcomp-mongo
    restart: always
    logging:
      options:
        max-size: 1g
    environment:
      - MONGO_INITDB_ROOT_USERNAME=mongoadmin
      - MONGO_INITDB_ROOT_PASSWORD=bdung
    image: mongo

  app:
    depends_on:
      - db
      - mongo
      - kafka
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/networkapp
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: root
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    image: damiantomczyszyn/socialnetwork:backend
    build:
      context: .
      dockerfile: ./social-network/Dockerfile-app
    ports: 
      - "8080:8080"

  frontend:
    container_name: dockerized-react
    image: damiantomczyszyn/socialnetwork:frontend
    build:
      context: .
      dockerfile: ./social-network-frontend/Dockerfile
    volumes:
      - ./social-network-frontend/src:/app/src
    ports:
      - 3000:80
